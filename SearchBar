import * as React from 'react';
import { styled, alpha } from '@mui/material/styles';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import IconButton from '@mui/material/IconButton';
import Typography from '@mui/material/Typography';
import InputBase from '@mui/material/InputBase';
import MenuIcon from '@mui/icons-material/Menu';
import SearchIcon from '@mui/icons-material/Search';
import View from './View';
import { MyContext } from './AuthProvider';

const Search = styled('div')(({ theme }) => ({
  position: 'relative',
  borderRadius: theme.shape.borderRadius,
  backgroundColor: alpha(theme.palette.common.white, 0.15),
  '&:hover': {
    backgroundColor: alpha(theme.palette.common.white, 0.25),
  },
  marginLeft: 0,
  width: '100%',
  [theme.breakpoints.up('sm')]: {
    marginLeft: theme.spacing(1),
    width: 'auto',
  },
}));

const SearchIconWrapper = styled('div')(({ theme }) => ({
  padding: theme.spacing(0, 2),
  height: '100%',
  position: 'absolute',
  pointerEvents: 'none',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
}));

const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: 'inherit',
  width: '100%',
  '& .MuiInputBase-input': {
    padding: theme.spacing(1, 1, 1, 0),
    // vertical padding + font size from searchIcon
    paddingLeft: `calc(1em + ${theme.spacing(4)})`,
    transition: theme.transitions.create('width'),
    [theme.breakpoints.up('sm')]: {
      width: '12ch',
      '&:focus': {
        width: '20ch',
      },
    },
  },
}));

export default function SearchBar(props) {
  
  const[inp,setinp]=React.useState('');
  // const[filteredData,setFilteredData]=React.useState([]);

  React.useEffect(()=>{
    // let arr = localStorage.getItem('Obj') ? JSON.parse(localStorage.getItem('Obj')) : [];
    
    // let data=arr.filter((item)=>item.Fname.toLowerCase().includes(inp.toLowerCase()) ||
                                // item.Email.toLowerCase().includes(inp.toLowerCase()));
    // let dataD= data.length> 1 ? data :[];
    // setFilteredData(data);
    // if (data.length > 0) {
    //   setFilteredData(data);
    // } else {
     
    //   setFilteredData([]);
    props.data(inp);
    // }
  },[inp])

  // console.log("Matched",filteredData);
  

  // console.log("Search",inp);
 
  return (
    <Box sx={{ flexGrow: 1 }}>
      {/* <AppBar position="static"> */}
      <Toolbar>
        <Search>
          <SearchIconWrapper>
            <SearchIcon />
          </SearchIconWrapper>
          <StyledInputBase
            placeholder="Searchâ€¦"
            inputProps={{ 'aria-label': 'search' }}
            onChange={(e)=>setinp(e.target.value)}
          />
        </Search>
      </Toolbar>
      {/* </AppBar> */}
      {/* <View value={filteredData}/> */}
    </Box>
  );
}

